Calculating YALMIP's 'optimizer' for optimization over channels. It can take a while depending on the size of the problem.
Calculating YALMIP's 'optimizer' for the POVM of party 1. It can take a while.
Calculating YALMIP's 'optimizer' for the POVM of party 2. It can take a while.
Calculating YALMIP's 'optimizer' for the POVM of party 3. It can take a while.
rng info:

     Type: 'twister'
     Seed: 725749761
    State: [625×1 uint32]



	Inequality number = 2



Next iteration of big loop.
Looking for a good initial condition.
Ineq.nr.:2/185 Big.loop:1/20 Ini.iter.:1/100 Vis of ineq given random ini = 0.051833. vis_state=0.000000 Bell·p_ent=4.117139 Bell·p_unif=1.857189 bound_l=4.000000 bound_q=4.750690 
   Found good initial condition. Bell value:4.117139 NS2Bound:4.000000 ineq_visibility= 0.051833 state_vis=0.000000
   Given this point, optimize the visibility of the inequality.
Ineq.nr.:2/185 Big.loop.:1/20 Vis_iter=1 Ineq vis after optimizing: 0.051821 with vis_state=0.000000. Updating vis_state from 0.000000 to 0.038866. (Bellvalue=4.117141 bound_l=4.000000 bound_q=4.750690).
Ineq.nr.:2/185 Big.loop.:1/20 Vis_iter=2 Ineq vis after optimizing: 0.127152 with vis_state=0.038866. Updating vis_state from 0.038866 to 0.130524. (Bellvalue=4.075184 bound_l=4.000000 bound_q=4.750690).
Ineq.nr.:2/185 Big.loop.:1/20 Vis_iter=3 Ineq vis after optimizing: 0.136728 with vis_state=0.130524. Updating vis_state from 0.130524 to 0.219685. (Bellvalue=4.037123 bound_l=4.000000 bound_q=4.750690).
Ineq.nr.:2/185 Big.loop.:1/20 Vis_iter=4 Ineq vis after optimizing: 0.083143 with vis_state=0.219685. Updating vis_state from 0.219685 to 0.268343. (Bellvalue=4.014180 bound_l=4.000000 bound_q=4.750690).
Ineq.nr.:2/185 Big.loop.:1/20 Vis_iter=5 Ineq vis after optimizing: 0.032159 with vis_state=0.268343. Updating vis_state from 0.268343 to 0.285990. (Bellvalue=4.004401 bound_l=4.000000 bound_q=4.750690).
Ineq.nr.:2/185 Big.loop.:1/20 Vis_iter=6 Ineq vis after optimizing: 0.009503 with vis_state=0.285990. Updating vis_state from 0.285990 to 0.291079. (Bellvalue=4.001203 bound_l=4.000000 bound_q=4.750690).
Ineq.nr.:2/185 Big.loop.:1/20 Vis_iter=7 Ineq vis after optimizing: 0.002518 with vis_state=0.291079. Updating vis_state from 0.291079 to 0.292418. (Bellvalue=4.000312 bound_l=4.000000 bound_q=4.750690).
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('arXiv1112_2626_check_mafalda', 'C:\Users\eboghiu\OneDrive - ICFO\Documents\Code\broadcast2\Copy_of_scripts_ns2_mafalda1\arXiv1112_2626_check_mafalda.m', 204)" style="font-weight:bold">arXiv1112_2626_check_mafalda</a> (<a href="matlab: opentoline('C:\Users\eboghiu\OneDrive - ICFO\Documents\Code\broadcast2\Copy_of_scripts_ns2_mafalda1\arXiv1112_2626_check_mafalda.m',204,0)">line 204</a>)
found one
} 
best_channel

best_channel =

  1×1 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {4×2 double}

kr=KrausOperators(best_channel, [2,4]); U = kr{1}; Uc = ChoiMatrix(U);
Uc

Uc =

  -0.2715 - 0.4002i  -0.5508 + 0.2453i
   0.1677 + 0.1141i  -0.4309 + 0.5791i
  -0.6584 - 0.4507i   0.1113 - 0.2003i
  -0.2475 + 0.1645i   0.2510 + 0.0000i

U

U =

  -0.2715 - 0.4002i  -0.5508 + 0.2453i
   0.1677 + 0.1141i  -0.4309 + 0.5791i
  -0.6584 - 0.4507i   0.1113 - 0.2003i
  -0.2475 + 0.1645i   0.2510 + 0.0000i

ChoiMatrix(U)

ans =

  -0.2715 - 0.4002i  -0.5508 + 0.2453i
   0.1677 + 0.1141i  -0.4309 + 0.5791i
  -0.6584 - 0.4507i   0.1113 - 0.2003i
  -0.2475 + 0.1645i   0.2510 + 0.0000i

ChoiMap(U)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('horzcat')" style="font-weight:bold">horzcat</a>
Dimensions of arrays being concatenated are not consistent.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('ChoiMap', 'C:\Users\eboghiu\MATLAB external\QETLAB-0.9\ChoiMap.m', 31)" style="font-weight:bold">ChoiMap</a> (<a href="matlab: opentoline('C:\Users\eboghiu\MATLAB external\QETLAB-0.9\ChoiMap.m',31,0)">line 31</a>)
C = diag([a+1,c,b,b,a+1,c,c,b,a+1]) - psi*psi';
} 
kr=KrausOperators(best_channel, [2,4]); U = kr{1}; Uc = ChoiMatrix({U});
Uc

Uc =

   0.2339 + 0.0000i  -0.0912 - 0.0361i   0.3591 + 0.1411i   0.0014 + 0.1437i   0.0513 + 0.2870i  -0.1148 + 0.3297i   0.0499 - 0.0989i  -0.0681 - 0.1004i
  -0.0912 + 0.0361i   0.0411 + 0.0000i  -0.1618 + 0.0005i  -0.0228 - 0.0558i  -0.0644 - 0.1040i  -0.0062 - 0.1463i  -0.0042 + 0.0463i   0.0421 + 0.0286i
   0.3591 - 0.1411i  -0.1618 - 0.0005i   0.6367 + 0.0000i   0.0889 + 0.2199i   0.2520 + 0.4098i   0.0227 + 0.5755i   0.0170 - 0.1820i  -0.1653 - 0.1131i
   0.0014 - 0.1437i  -0.0228 + 0.0558i   0.0889 - 0.2199i   0.0883 + 0.0000i   0.1767 - 0.0299i   0.2019 + 0.0725i  -0.0605 - 0.0313i  -0.0621 + 0.0413i
   0.0513 - 0.2870i  -0.0644 + 0.1040i   0.2520 - 0.4098i   0.1767 + 0.0299i   0.3635 + 0.0000i   0.3794 + 0.2132i  -0.1104 - 0.0830i  -0.1382 + 0.0616i
  -0.1148 - 0.3297i  -0.0062 + 0.1463i   0.0227 - 0.5755i   0.2019 - 0.0725i   0.3794 - 0.2132i   0.5210 + 0.0000i  -0.1639 - 0.0219i  -0.1082 + 0.1453i
   0.0499 + 0.0989i  -0.0042 - 0.0463i   0.0170 + 0.1820i  -0.0605 + 0.0313i  -0.1104 + 0.0830i  -0.1639 + 0.0219i   0.0525 + 0.0000i   0.0279 - 0.0503i
  -0.0681 + 0.1004i   0.0421 - 0.0286i  -0.1653 + 0.1131i  -0.0621 - 0.0413i  -0.1382 - 0.0616i  -0.1082 - 0.1453i   0.0279 + 0.0503i   0.0630 + 0.0000i

eig(best_channel)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('eig')" style="font-weight:bold">eig</a>
Invalid data type. Input matrix must be double or single.
} 
best_channel

best_channel =

  1×1 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {4×2 double}

ChoiMatrix(best_channel)

ans =

   0.2339 + 0.0000i  -0.0912 - 0.0361i   0.3591 + 0.1411i   0.0014 + 0.1437i   0.0513 + 0.2870i  -0.1148 + 0.3297i   0.0499 - 0.0989i  -0.0681 - 0.1004i
  -0.0912 + 0.0361i   0.0411 + 0.0000i  -0.1618 + 0.0005i  -0.0228 - 0.0558i  -0.0644 - 0.1040i  -0.0062 - 0.1463i  -0.0042 + 0.0463i   0.0421 + 0.0286i
   0.3591 - 0.1411i  -0.1618 - 0.0005i   0.6367 + 0.0000i   0.0889 + 0.2199i   0.2520 + 0.4098i   0.0227 + 0.5755i   0.0170 - 0.1820i  -0.1653 - 0.1131i
   0.0014 - 0.1437i  -0.0228 + 0.0558i   0.0889 - 0.2199i   0.0883 + 0.0000i   0.1767 - 0.0299i   0.2019 + 0.0725i  -0.0605 - 0.0313i  -0.0621 + 0.0413i
   0.0513 - 0.2870i  -0.0644 + 0.1040i   0.2520 - 0.4098i   0.1767 + 0.0299i   0.3635 + 0.0000i   0.3794 + 0.2132i  -0.1104 - 0.0830i  -0.1382 + 0.0616i
  -0.1148 - 0.3297i  -0.0062 + 0.1463i   0.0227 - 0.5755i   0.2019 - 0.0725i   0.3794 - 0.2132i   0.5210 + 0.0000i  -0.1639 - 0.0219i  -0.1082 + 0.1453i
   0.0499 + 0.0989i  -0.0042 - 0.0463i   0.0170 + 0.1820i  -0.0605 + 0.0313i  -0.1104 + 0.0830i  -0.1639 + 0.0219i   0.0525 + 0.0000i   0.0279 - 0.0503i
  -0.0681 + 0.1004i   0.0421 - 0.0286i  -0.1653 + 0.1131i  -0.0621 - 0.0413i  -0.1382 - 0.0616i  -0.1082 - 0.1453i   0.0279 + 0.0503i   0.0630 + 0.0000i

eig(ChoiMatrix(best_channel))

ans =

   -0.0000
   -0.0000
   -0.0000
    0.0000
    0.0000
    0.0000
    0.0000
    2.0000

Uc

Uc =

   0.2339 + 0.0000i  -0.0912 - 0.0361i   0.3591 + 0.1411i   0.0014 + 0.1437i   0.0513 + 0.2870i  -0.1148 + 0.3297i   0.0499 - 0.0989i  -0.0681 - 0.1004i
  -0.0912 + 0.0361i   0.0411 + 0.0000i  -0.1618 + 0.0005i  -0.0228 - 0.0558i  -0.0644 - 0.1040i  -0.0062 - 0.1463i  -0.0042 + 0.0463i   0.0421 + 0.0286i
   0.3591 - 0.1411i  -0.1618 - 0.0005i   0.6367 + 0.0000i   0.0889 + 0.2199i   0.2520 + 0.4098i   0.0227 + 0.5755i   0.0170 - 0.1820i  -0.1653 - 0.1131i
   0.0014 - 0.1437i  -0.0228 + 0.0558i   0.0889 - 0.2199i   0.0883 + 0.0000i   0.1767 - 0.0299i   0.2019 + 0.0725i  -0.0605 - 0.0313i  -0.0621 + 0.0413i
   0.0513 - 0.2870i  -0.0644 + 0.1040i   0.2520 - 0.4098i   0.1767 + 0.0299i   0.3635 + 0.0000i   0.3794 + 0.2132i  -0.1104 - 0.0830i  -0.1382 + 0.0616i
  -0.1148 - 0.3297i  -0.0062 + 0.1463i   0.0227 - 0.5755i   0.2019 - 0.0725i   0.3794 - 0.2132i   0.5210 + 0.0000i  -0.1639 - 0.0219i  -0.1082 + 0.1453i
   0.0499 + 0.0989i  -0.0042 - 0.0463i   0.0170 + 0.1820i  -0.0605 + 0.0313i  -0.1104 + 0.0830i  -0.1639 + 0.0219i   0.0525 + 0.0000i   0.0279 - 0.0503i
  -0.0681 + 0.1004i   0.0421 - 0.0286i  -0.1653 + 0.1131i  -0.0621 - 0.0413i  -0.1382 - 0.0616i  -0.1082 - 0.1453i   0.0279 + 0.0503i   0.0630 + 0.0000i

p_entangled = ProbMultidimArray(final_state(NoisyState(0, STATE_SETTINGS), Uc), best_POVMS, ins, outs);
                p_uniform   = ProbMultidimArray(final_state(NoisyState(1,                STATE_SETTINGS), Uc), best_POVMS, ins, outs);
                [ineq_visibility, LPstatus]= visibilityOfBellInequality(bellcoeffs, localboundNS2, p_entangled, p_uniform)

ineq_visibility =

     0


LPstatus =

     0

p_entangled = ProbMultidimArray(final_state(NoisyState(state_visibility, STATE_SETTINGS), channel), POVMs, ins, outs);
                p_uniform   = ProbMultidimArray(final_state(NoisyState(1,                STATE_SETTINGS), channel), POVMs, ins, outs);
                [ineq_visibility, LPstatus]= visibilityOfBellInequality(bellcoeffs, localboundNS2, p_entangled, p_uniform);
ineq_visibility

ineq_visibility =

   6.4936e-04

p_entangled = ProbMultidimArray(final_state(NoisyState(0, STATE_SETTINGS), channel), POVMs, ins, outs);
                p_uniform   = ProbMultidimArray(final_state(NoisyState(1,                STATE_SETTINGS), channel), POVMs, ins, outs);
                [ineq_visibility, LPstatus]= visibilityOfBellInequality(bellcoeffs, localboundNS2, p_entangled, p_uniform);
ineq_visibility

ineq_visibility =

    0.2929

kr=KrausOperators(channel, [2,4]); U = kr{1}; Uc = ChoiMatrix({U});
p_entangled = ProbMultidimArray(final_state(NoisyState(0, STATE_SETTINGS), Uc), POVMs, ins, outs);
                p_uniform   = ProbMultidimArray(final_state(NoisyState(1,                STATE_SETTINGS), Uc), POVMs, ins, outs);
                [ineq_visibility, LPstatus]= visibilityOfBellInequality(bellcoeffs, localboundNS2, p_entangled, p_uniform);
ineq_visibility

ineq_visibility =

    0.2929

bellcoeffs

bellcoeffs(:,:,1,1,1,1) =

    -3    -3
    -3     1


bellcoeffs(:,:,2,1,1,1) =

     1     1
     1     1


bellcoeffs(:,:,1,2,1,1) =

    -1    -1
     3    -1


bellcoeffs(:,:,2,2,1,1) =

    -1    -1
    -1    -1


bellcoeffs(:,:,1,1,2,1) =

    -1     3
    -1    -1


bellcoeffs(:,:,2,1,2,1) =

    -1    -1
    -1    -1


bellcoeffs(:,:,1,2,2,1) =

     1     1
     1     1


bellcoeffs(:,:,2,2,2,1) =

    -3     1
     1     1


bellcoeffs(:,:,1,1,1,2) =

     3    -1
    -1    -1


bellcoeffs(:,:,2,1,1,2) =

    -1    -1
    -1    -1


bellcoeffs(:,:,1,2,1,2) =

     1    -3
     1     1


bellcoeffs(:,:,2,2,1,2) =

     1     1
     1     1


bellcoeffs(:,:,1,1,2,2) =

     1     1
    -3     1


bellcoeffs(:,:,2,1,2,2) =

     1     1
     1     1


bellcoeffs(:,:,1,2,2,2) =

    -1     3
     3    -1


bellcoeffs(:,:,2,2,2,2) =

     3    -1
    -1    -1

mat=fromCorrToBellMat(ins,outs); mat*bellcoeffs(:)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mtimes')" style="font-weight:bold"> * </a>
Incorrect dimensions for matrix multiplication. Check that the number of columns in the first matrix matches the number of rows in the second matrix. To perform elementwise multiplication, use '.*'.

<a href="matlab:helpview('matlab','error_innerdim')" style="font-weight:bold">Related documentation</a>
} 
mat=fromCorrToBellMat(ins,outs);
bellcoeffs(:)

ans =

    -3
    -3
    -3
     1
     1
     1
     1
     1
    -1
     3
    -1
    -1
    -1
    -1
    -1
    -1
    -1
    -1
     3
    -1
    -1
    -1
    -1
    -1
     1
     1
     1
     1
    -3
     1
     1
     1
     3
    -1
    -1
    -1
    -1
    -1
    -1
    -1
     1
     1
    -3
     1
     1
     1
     1
     1
     1
    -3
     1
     1
     1
     1
     1
     1
    -1
     3
     3
    -1
     3
    -1
    -1
    -1

mat

mat =

     1     0     1     1     0     0     0     0     1     1     0     1     1     0     0     0     0     0     0     0     0     0     0     0     0     0
     0     1     0     0     1     0     0     0     0     0     1     0     0     1     0     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     1     1     0     0     0     0     0     0     0     1     1     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1     1     0     1     1     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1     0     0     1     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1     1     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1
    -1     0     1    -1     0     0     0     0     1    -1     0     1    -1     0     0     0     0     0     0     0     0     0     0     0     0     0
     0    -1     0     0    -1     0     0     0     0     0    -1     0     0    -1     0     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     1    -1     0     0     0     0     0     0     0     1    -1     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1    -1     0     1    -1     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1     0     0    -1     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1    -1     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1
     1     0    -1    -1     0     0     0     0     1     1     0    -1    -1     0     0     0     0     0     0     0     0     0     0     0     0     0
     0     1     0     0    -1     0     0     0     0     0     1     0     0    -1     0     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0    -1    -1     0     0     0     0     0     0     0    -1    -1     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1     1     0    -1    -1     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1     0     0    -1     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1    -1     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1
    -1     0    -1     1     0     0     0     0     1    -1     0    -1     1     0     0     0     0     0     0     0     0     0     0     0     0     0
     0    -1     0     0     1     0     0     0     0     0    -1     0     0     1     0     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0    -1     1     0     0     0     0     0     0     0    -1     1     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1    -1     0    -1     1     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1     0     0     1     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1     1     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1
     1     0     1     1     0     0     0     0    -1    -1     0    -1    -1     0     0     0     0     0     0     0     0     0     0     0     0     0
     0     1     0     0     1     0     0     0     0     0    -1     0     0    -1     0     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     1     1     0     0     0     0     0     0     0    -1    -1     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1    -1     0    -1    -1     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1     0     0    -1     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1    -1     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1
    -1     0     1    -1     0     0     0     0    -1     1     0    -1     1     0     0     0     0     0     0     0     0     0     0     0     0     0
     0    -1     0     0    -1     0     0     0     0     0     1     0     0     1     0     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     1    -1     0     0     0     0     0     0     0    -1     1     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1     1     0    -1     1     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1     0     0     1     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1     1     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1
     1     0    -1    -1     0     0     0     0    -1    -1     0     1     1     0     0     0     0     0     0     0     0     0     0     0     0     0
     0     1     0     0    -1     0     0     0     0     0    -1     0     0     1     0     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0    -1    -1     0     0     0     0     0     0     0     1     1     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1    -1     0     1     1     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1     0     0     1     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1     1     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1
    -1     0    -1     1     0     0     0     0    -1     1     0     1    -1     0     0     0     0     0     0     0     0     0     0     0     0     0
     0    -1     0     0     1     0     0     0     0     0     1     0     0    -1     0     0     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0    -1     1     0     0     0     0     0     0     0     1    -1     0     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1     1     0     1    -1     0     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1     0     0    -1     0     0     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     1    -1     0
     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0     0    -1

size(mat)

ans =

    64    26

mat'

ans =

  Columns 1 through 35

     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0
     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0
     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0
     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0
     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0
     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1
     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1
     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0
     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0
     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0
     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0
     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0
     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0
     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0
     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1
     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1
     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0
     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0
     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0
     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0
     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0
     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0
     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0
     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0
     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0
     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0

  Columns 36 through 64

     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0
     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0
     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0
     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0
     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0
     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0
     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0
     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0
     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0
     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0
     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0
     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0
     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0
     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0
     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0
     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0
    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0
     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0
     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0
     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0
     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0
     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0     0
     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0     0
     0     0     0    -1     0     0     0     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0
     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1     0
     0     0     0     0    -1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0     1     0     0     0     0     0     0     0    -1

size(bellcoeffs(:))

ans =

    64     1

mat=fromBellToCorrMat(ins,outs);
mat*bellcoeffs(:)

ans =

     0
     0
    -2
     0
     0
     0
    -2
     0
     0
    -1
    -1
     0
    -1
     0
    -1
     0
    -1
     1
    -1
     1
     0
     1
     0
     1
     0
     1
     1

(mat*bellcoeffs(:))'

ans =

     0     0    -2     0     0     0    -2     0     0    -1    -1     0    -1     0    -1     0    -1     1    -1     1     0     1     0     1     0     1     1

Uc

Uc =

  Columns 1 through 5

   0.3291 + 0.0000i   0.3256 - 0.2591i   0.1251 + 0.1151i   0.1284 + 0.0478i  -0.0587 + 0.1781i
   0.3256 + 0.2591i   0.5260 + 0.0000i   0.0332 + 0.2124i   0.0894 + 0.1484i  -0.1982 + 0.1300i
   0.1251 - 0.1151i   0.0332 - 0.2124i   0.0878 + 0.0000i   0.0655 - 0.0267i   0.0400 + 0.0882i
   0.1284 - 0.0478i   0.0894 - 0.1484i   0.0655 + 0.0267i   0.0571 + 0.0000i   0.0030 + 0.0780i
  -0.0587 - 0.1781i  -0.1982 - 0.1300i   0.0400 - 0.0882i   0.0030 - 0.0780i   0.1068 + 0.0000i
  -0.0714 - 0.0869i  -0.1390 - 0.0298i   0.0033 - 0.0580i  -0.0152 - 0.0443i   0.0598 - 0.0231i
   0.3684 + 0.2124i   0.5317 - 0.0799i   0.0658 + 0.2096i   0.1129 + 0.1364i  -0.1807 + 0.1615i
   0.2955 - 0.1145i   0.2022 - 0.3458i   0.1524 + 0.0598i   0.1319 - 0.0018i   0.0093 + 0.1803i

  Columns 6 through 8

  -0.0714 + 0.0869i   0.3684 - 0.2124i   0.2955 + 0.1145i
  -0.1390 + 0.0298i   0.5317 + 0.0799i   0.2022 + 0.3458i
   0.0033 + 0.0580i   0.0658 - 0.2096i   0.1524 - 0.0598i
  -0.0152 + 0.0443i   0.1129 - 0.1364i   0.1319 + 0.0018i
   0.0598 + 0.0231i  -0.1807 - 0.1615i   0.0093 - 0.1803i
   0.0384 + 0.0000i  -0.1360 - 0.0512i  -0.0339 - 0.1029i
  -0.1360 + 0.0512i   0.5496 + 0.0000i   0.2569 + 0.3189i
  -0.0339 + 0.1029i   0.2569 - 0.3189i   0.3051 + 0.0000i

U

U =

   0.5349 + 0.2072i   0.0168 - 0.3264i
   0.3660 + 0.6261i  -0.0613 - 0.1862i
   0.2759 - 0.1083i   0.4651 + 0.5773i
   0.2389 + 0.0032i   0.5524 + 0.0000i

POVMs

POVMs =

  1×3 <a href="matlab:helpPopup cell" style="font-weight:bold">cell</a> array

    {1×2 cell}    {1×2 cell}    {1×2 cell}

a1=POVMs{1}{1}{1}-POVMs{1}{1}{2};
a2=POVMs{1}{2}{1}-POVMs{1}{2}{2};
a1*a2-a1*a2

ans =

     0     0
     0     0

a1*a2+a1*a2

ans =

  -0.0002 - 0.0000i   0.4011 - 1.9594i
  -0.4011 - 1.9594i  -0.0002 + 0.0000i

b1=POVMs{2}{1}{1}-POVMs{2}{1}{2};
c1=POVMs{3}{1}{1}-POVMs{3}{1}{2};
b2=POVMs{2}{2}{1}-POVMs{2}{2}{2};
c2=POVMs{3}{2}{1}-POVMs{3}{2}{2};
eig(POVMs{2}{1}{1})

ans =

    0.0000
    1.0000

eig(POVMs{2}{1}{2})

ans =

   -0.0000
    1.0000

eig(POVMs{2}{1}{1})

ans =

    0.0000
    1.0000

eig(POVMs{2}{2}{1})

ans =

   -0.0000
    0.9999

eig(POVMs{2}{2}{2})

ans =

    0.0001
    1.0000

eig(POVMs{3}{2}{2})

ans =

    0.0000
    1.0000

eig(POVMs{3}{1}{2})

ans =

    0.0000
    1.0000

eig(POVMs{1}{2}{2})

ans =

    0.0000
    1.0000

eig(POVMs{1}{1}{2})

ans =

    0.0000
    1.0000

eig(POVMs{2}{1}{2})

ans =

   -0.0000
    1.0000

eig(POVMs{2}{2}{2})

ans =

    0.0001
    1.0000

eig(POVMs{3}{2}{2})

ans =

    0.0000
    1.0000

eig(POVMs{3}{1}{2})

ans =

    0.0000
    1.0000

eig(POVMs{3}{2}{2})

ans =

    0.0000
    1.0000

a1*a2-a1*a2

ans =

     0     0
     0     0

a1*a2

ans =

  -0.0001 - 0.0000i   0.2005 - 0.9797i
  -0.2005 - 0.9797i  -0.0001 + 0.0000i

a2*a1

ans =

  -0.0001 + 0.0000i  -0.2005 + 0.9797i
   0.2005 + 0.9797i  -0.0001 - 0.0000i

a1*a2+a2*a1

ans =

   1.0e-03 *

  -0.2292 + 0.0000i  -0.0000 + 0.0000i
  -0.0000 - 0.0000i  -0.2292 - 0.0000i

a1*a2+a2*a1

ans =

   1.0e-03 *

  -0.2292 + 0.0000i  -0.0000 + 0.0000i
  -0.0000 - 0.0000i  -0.2292 - 0.0000i

a1*a2-a2*a1

ans =

   0.0000 - 0.0000i   0.4011 - 1.9594i
  -0.4011 - 1.9594i   0.0000 + 0.0000i

a2*a1-a1*a2

ans =

   0.0000 + 0.0000i  -0.4011 + 1.9594i
   0.4011 + 1.9594i   0.0000 - 0.0000i

a1*b1+b1*a1

ans =

   1.4930 - 0.0000i  -0.0000 + 0.0000i
  -0.0000 - 0.0000i   1.4930 + 0.0000i

a1*b2+b2*a1

ans =

  -1.6818 + 0.0000i   0.0000 - 0.0001i
   0.0000 + 0.0001i  -1.6817 + 0.0000i


BlochAllObs(POVMs)
for party=1:nrparties
                for x=1:ins(party)
                    obs_x = POVMs{party}{x}{1}-POVMs{party}{x}{2};
                    bloch = BlochComponents(obs_x);
                    bloch = num2cell(bloch(2:4));
                    [azimuth,elevation,r] = cart2sph(bloch{:});
                    azimuth = azimuth*180/pi;
                    elevation = elevation*180/pi;
                    fprintf("Party: %d, input:%d, obs: (azimuth[º],elevation[º],r)=(%f,%f,%f)\n", party, x, azimuth, elevation, r);
                end
            end
Party: 1, input:1, obs: (azimuth[º],elevation[º],r)=(-101.568351,42.086153,2.000000)
Party: 1, input:2, obs: (azimuth[º],elevation[º],r)=(78.431649,47.907280,2.000000)
Party: 2, input:1, obs: (azimuth[º],elevation[º],r)=(-39.408052,54.286397,2.000000)
Party: 2, input:2, obs: (azimuth[º],elevation[º],r)=(121.468423,-38.247802,1.999886)
Party: 3, input:1, obs: (azimuth[º],elevation[º],r)=(-142.870837,10.068017,2.000000)
Party: 3, input:2, obs: (azimuth[º],elevation[º],r)=(131.056177,-18.879513,2.000000)
POVMs{1}{1}{1}

ans =

   0.8351 + 0.0000i  -0.0744 + 0.3635i
  -0.0744 - 0.3635i   0.1649 + 0.0000i

POVMs{1}{1}{2}

ans =

   0.1649 + 0.0000i   0.0744 - 0.3635i
   0.0744 + 0.3635i   0.8351 + 0.0000i

POVMs{1}{2}{1}

ans =

   0.8710 + 0.0000i   0.0672 - 0.3284i
   0.0672 + 0.3284i   0.1290 + 0.0000i

POVMs{1}{2}{2}

ans =

   0.1290 + 0.0000i  -0.0672 + 0.3284i
  -0.0672 - 0.3284i   0.8710 + 0.0000i

POVMs{2}{1}{1}

ans =

   0.9060 + 0.0000i   0.2255 + 0.1853i
   0.2255 - 0.1853i   0.0940 + 0.0000i

POVMs{2}{1}{2}

ans =

   0.0940 + 0.0000i  -0.2255 - 0.1853i
  -0.2255 + 0.1853i   0.9060 + 0.0000i

POVMs{2}{2}{1}

ans =

   0.1905 + 0.0000i  -0.2050 - 0.3349i
  -0.2050 + 0.3349i   0.8095 + 0.0000i

POVMs{2}{2}{2}

ans =

   0.8095 + 0.0000i   0.2050 + 0.3349i
   0.2050 - 0.3349i   0.1905 + 0.0000i

POVMs{3}{1}{1}

ans =

   0.5874 + 0.0000i  -0.3925 + 0.2972i
  -0.3925 - 0.2972i   0.4126 + 0.0000i

POVMs{3}{1}{2}

ans =

   0.4126 + 0.0000i   0.3925 - 0.2972i
   0.3925 + 0.2972i   0.5874 + 0.0000i

POVMs{3}{2}{1}

ans =

   0.3382 + 0.0000i  -0.3107 - 0.3567i
  -0.3107 + 0.3567i   0.6618 + 0.0000i

POVMs{3}{2}{2}

ans =

   0.6618 + 0.0000i   0.3107 + 0.3567i
   0.3107 - 0.3567i   0.3382 + 0.0000i

a2

a2 =

   0.7421 + 0.0000i   0.1344 - 0.6567i
   0.1344 + 0.6567i  -0.7421 + 0.0000i

ineq_nr

ineq_nr =

     2

sum(bellcoeffs.*p_entangled,'all')

ans =

    4.0510

sum(bellcoeffs.*p_uniform,'all')

ans =

    3.8769

utrial=[[1,0];[0,1];[0,0];[0,0]]

utrial =

     1     0
     0     1
     0     0
     0     0

ChoiMatrix({utrial})

ans =

     1     0     0     0     0     1     0     0
     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0
     1     0     0     0     0     1     0     0
     0     0     0     0     0     0     0     0
     0     0     0     0     0     0     0     0

p_uniform   = ProbMultidimArray(final_state(NoisyState(1, STATE_SETTINGS), {utrial}), POVMs, ins, outs);
                    
p_uniform

p_uniform(:,:,1,1,1,1) =

    0.2649    0.0557
    0.2649    0.0557


p_uniform(:,:,2,1,1,1) =

    0.1555    0.0327
    0.1555    0.0327


p_uniform(:,:,1,2,1,1) =

    0.2649    0.0557
    0.2649    0.0557


p_uniform(:,:,2,2,1,1) =

    0.1555    0.0327
    0.1555    0.0327


p_uniform(:,:,1,1,2,1) =

    0.0275    0.2367
    0.0275    0.2367


p_uniform(:,:,2,1,2,1) =

    0.0161    0.1389
    0.0161    0.1389


p_uniform(:,:,1,2,2,1) =

    0.0275    0.2367
    0.0275    0.2367


p_uniform(:,:,2,2,2,1) =

    0.0161    0.1389
    0.0161    0.1389


p_uniform(:,:,1,1,1,2) =

    0.1881    0.0395
    0.1881    0.0395


p_uniform(:,:,2,1,1,2) =

    0.2975    0.0625
    0.2975    0.0625


p_uniform(:,:,1,2,1,2) =

    0.1881    0.0395
    0.1881    0.0395


p_uniform(:,:,2,2,1,2) =

    0.2975    0.0625
    0.2975    0.0625


p_uniform(:,:,1,1,2,2) =

    0.0195    0.1681
    0.0195    0.1681


p_uniform(:,:,2,1,2,2) =

    0.0309    0.2658
    0.0309    0.2658


p_uniform(:,:,1,2,2,2) =

    0.0195    0.1681
    0.0195    0.1681


p_uniform(:,:,2,2,2,2) =

    0.0309    0.2658
    0.0309    0.2658

sum(bellcoeffs.*p_uniform,'all')

ans =

    0.9902

p_uniform   = ProbMultidimArray(final_state(NoisyState(1,                STATE_SETTINGS), channel), POVMs, ins, outs);
                
sum(bellcoeffs.*p_uniform,'all')

ans =

    3.8769

sum(bellcoeffs.*p_entangled,'all')

ans =

    4.0510

sum(bellcoeffs.*p_uniform,'all')

ans =

    3.8769

Exception "java.lang.ClassNotFoundException: com/intellij/codeInsight/editorActions/FoldingData"while constructing DataFlavor for: application/x-java-jvm-local-objectref; class=com.intellij.codeInsight.editorActions.FoldingData
Exception "java.lang.ClassNotFoundException: com/intellij/codeInsight/editorActions/FoldingData"while constructing DataFlavor for: application/x-java-jvm-local-objectref; class=com.intellij.codeInsight.editorActions.FoldingData
